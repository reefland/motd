#!/bin/bash

# Max Temperature (red color)
MAX_TEMP_C=40
MAX_TEMP_F=104

# Warning Temperature, percentage of MAX_TEMP 1 = 100% (yellow color)
WARN_PERCENT=0.85

# set column width
COLUMNS=2
# colors
white="\e[39m"
yellow="\e[1;33m"
green="\e[1;32m"
red="\e[1;31m"
dim="\e[2m"
undim="\e[0m"

#------------------------------------------------------------------------------
# You can update this - Types of disks to look for. Used by awk to define disk
# by-id types to include IDE/SATA - you might add another for usb "usb-".
findthese="ata-|scsi-SATA_"

# You can update this - This is used by awk to remove unwanted disk devices
# which matched above.
ignorethese="ata-Samsung"

# You can update this - This is used by sed to remove text from disk device
# names. This does not alter device selection like ones above.  This just helps
# to make disk device names nicer.
sed_filter="s/^scsi-SATA_//; s/^ata-//; s/Series_//"
#------------------------------------:------------------------------------------

# Don't update below this here

# These are not disks: partitions, cd-roms, etc.
notdisks="part[0-9]|sr[0-9]|/dm-|/md-|total"

# Collect all disk devices which don't match "notdisks"
alldisks=$(find /dev/disk/by-id/ -type l -printf "%p %l\n" | sort -k 2  | awk -F/ -v a=$notdisks '$0 !~ a  { print }')

# Dynamically generate simple disk names available (sda, sdb, sdc, ...)  these change if disks are removed
disksalias=$(echo "${alldisks[@]}" | awk -F/ -v a=$findthese -v b=$ignorethese '$0 ~ a && $0 !~ b { print $7 }' | uniq);disksalias=($disksalias)

# Capture Raw Disk Data to Work on.
# Assumption: Last 15 chars can be used to find duplicate device. Combination of device alias and serial number.
# This will remove any duplicate devices.
rawdisks=$(echo "${alldisks[@]}" | awk -F'[/ ]' -v a=$findthese -v b=$ignorethese '$0 ~ a && $0 !~ b { print $5}' | rev | uniq -w 15 | rev);rawdisks=($rawdisks)

# Clean-up disk names to display with sed_filter 
disks=$(printf '%s\n' "${rawdisks[@]}"|sed "$sed_filter");disks=($disks)

# Grab a shorter subset of the name. It will return everything to the LEFT of the right-most "_"
shortnames=$(printf '%s\n' "${disks[@]}" | sed -r 's/^(.*)_.*$/\1/');shortnames=($shortnames)

# Dynamically grab last 4 digits of disk serial number
diskserials=$(printf '%s\n' "${disks[@]}"| sed -r 's/.*(....)$/\1/');diskserials=($diskserials)

# hddtemp daemon connection info
hddtemp_host=localhost
hddtemp_port=7634

# logfiles to check
logfiles='/var/log/syslog /var/log/syslog.1'

# get all lines with smartd entries from syslog
lines=$(tac $logfiles 2>/dev/null | grep -hiP 'smartd.*previous self-test')
# use nc to query temps from hddtemp daemon, echo needed to get NC to return data
hddtemp=$(echo -n | nc $hddtemp_host $hddtemp_port |sed 's/|//m' | sed 's/||/ \n/g')

out=""

# generate data to display about devices
for i in "${!disksalias[@]}"; do  #for every /dev/sdX device name
    # Get smartd testing status
    # Determine all possible names for the disk device
    possible_names=$(echo "${alldisks[@]}" | awk -v a=${disksalias[$i]} '$0 ~ a { print $1 }');possible_names=($possible_names)

    for name in "${possible_names[@]}";do
       result=$(echo "${lines}" | awk -v a=${name} '$0 ~ a {print $(NF-1),$NF; exit 1 }')
       if [ $? -eq 1 ]; then
         break
       fi
    done

    # Get Temperature and Unit
    temp=$( (grep "${disksalias[$i]}" <<< "${hddtemp}") | cut -d "|" -f3)
    # Get The Unit from the temperature
    unit=$( (grep "${disksalias[$i]}" <<< "${hddtemp}") | cut -d "|" -f4)
    unit=${unit% } # Trim trailing space if it has it

    # Determine if MAX_TEMP is based on C or F
    case "${unit}" in
      "f"|"F")
        MAX_TEMP=MAX_TEMP_F 
      ;;
      "c"|"C")
        MAX_TEMP=MAX_TEMP_C
      ;;
      *) # Unknown value
        MAX_TEMP=0
        unit=""
      ;;
    esac;

    # HDDTEMP can return an error if a drive was hot-swapped since restart
    # Deamon would need to be restarted to pickup new drive
    case "${temp}" in
      "ERR")
        color=$red
      ;;
      "UNK")
        color=$dim
      ;;
      *) # A temperature value
        if [[ "${temp}" -gt "${MAX_TEMP}" ]]; then
            color=$red
        else
          WARN_TEMP=$(echo "${MAX_TEMP_F} * ${WARN_PERCENT}" | bc)
          if [[ "${temp}" -gt $(printf %.0f ${WARN_TEMP}) ]]; then
            color=$yellow
          else          
            color=$green
          fi
        fi
      ;;
    esac;

    # Set color based on known or unknown status
    case "${result}" in
      "without error")
        status_color=$green
      ;;
      "with error")
        status_color=$red
      ;;
      *)
        result="untested"
        status_color=$dim
      ;;
    esac;

    # print temp & smartd error
    out+="${shortnames[$i]}_${diskserials[$i]} (${disksalias[$i]}):,${color}${temp}${unit}${undim} | ${status_color}${result}${undim},"
    # insert \n every $COLUMNS column
    if [ $((($i+1) % $COLUMNS)) -eq 0 ]; then
        out+="\n"
    fi
done
out+="\n"

printf "\ndisk status:\n"
printf "$out" | column -ts $',' | sed -e 's/^/  /'
